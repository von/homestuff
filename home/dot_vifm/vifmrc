" Configuration file for vifm
" See /usr/local/share/vifm/vifmrc-osx

" Options {{{ "
"
" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" This is the actual command used to start vi.  The default is vim.
" If you would like to use another vi clone such Elvis or Vile
" you will need to change this setting.

set vicmd=vim

" This is how many directories to store in the directory history.
set history=100

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).
set fastrun

" Sort by case-insensitive name
set sort=+iname

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" If you installed the vim.txt help file set vimhelp.
" If would rather use a plain text help file set novimhelp.
set novimhelp

" If you would like to run an executable file when you
" press return on the file name set this.
set norunexec

" Use KiB, MiB, ... instead of KB, MB, ...
set noiec

" The FUSE_HOME directory will be used as a root dir for all FUSE mounts.
" Unless it exists with write/exec permissions set, vifm will attempt to
" create it.
set fusehome=/tmp/vifm_FUSE

" Show list of matches on tab complition in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do to much requests to slow file systems
set slowfs=curlftpfs

" Don't set window title as tmux does that. See ../my-title-scheme.txt
set notitle

" What should be saved automatically between vifm runs
set vifminfo=dhistory,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks

" Show number of items in directories
set dirsize=nitems

" Don't confirm unless we permanently delete
set confirm=permdelete

" Default findprg has a comma that causes an error
set findprg="find %s %a -print"

" Remove 't' from cpoptions so C-I goes forward in directory history
set cpoptions=fs

" Program to run for 'media' command
set mediaprg=~/.vifm/bin/vifm-media-osx.py

" }}} Options "
" ------------------------------------------------------------------------------
" Appearance {{{ "
" Configuration appearance - see also "Choosing Configuration" below

" Set custom status line look
"   %t  Filename
"   %=  Separation between left- and right-aligned portions
"   %A  File attributes
"   %u  Username
"   %g  Groupname
"   %s  File size (human readable)
"   %d  File modification date
"   %{&sort}  Value of 'sort'
"   %1* Apply User1 highlight group (%2* for User2, etc.)
"   %*  Reset highlight group
set statusline="  %t%= %A %10u:%-7g %15s %20d %2*%{&sort}%* "

" Set consistent columns no matter how we are sorting
set viewcolumns="-{name}..,15{mtime},6{size}"

" Format for displaying time in file list.
" See 'man date' or 'man 3 strftime' for details.
set timefmt=%H:%M\ %D

" Selected color scheme
" See colors/von-default.vifm
colorscheme von-default

" }}} Appearance "
" ------------------------------------------------------------------------------
" Set pane title {{{ "

" Set to static string of "vifm"
!echo "\033]0;vifm\007"

" The following would set pane title with directories, but vifm puts them
" at top of its window, so its unneeded.
" The double quotes in %"d and %"D eliminates backslashes
" XXX %d and %D are relative so if the right window is active, the
" title is reversed.
" autocmd DirEnter ** !echo "\033]0;vifm: %"d:~  |  %"D:~  \007"

" }}} Set pane title "
" ------------------------------------------------------------------------------
" Configure marks {{{ "

" :mark mark /full/directory/path [filename]
" Use via single quote - e.g. '<mark>

mark b ~/Box\ Sync/
mark g ~/Google\ Drive/
mark t /tmp/

" }}} Configure marks "
" ------------------------------------------------------------------------------
" Configure bookmarks {{{ "

" Clear all bookmarks (for restarts)
delbmarks!

" No bookmarks defined.

" }}} Configure bookmarks "
" ------------------------------------------------------------------------------
" Commands {{{ "
"
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart

" fzf-based command {{{ "
if executable('fzf')
  " 'fzf' is visually more appealing than 'fzf-tmux'
  " Kudos: https://wiki.vifm.info/index.php/How_to_integrate_fzf_for_fuzzy_finding
  " Note the "2>/dev/tty" is critical or fzf will hang.
  " TODO: Figure out how to open/return choosen file instead of going to it.
  command! FZFfind : set noquickview
    \| let $FZF_PICK = term('find . | fzf 2>/dev/tty')
    \| if $FZF_PICK != ''
    \|   execute system('[ -f "$FZF_PICK" ] && echo goto || echo cd') fnameescape($FZF_PICK)
    \| endif

  " Kudos: https://github.com/vifm/vifm/issues/279
  " Note use of term() instead of system()

  " Select bookmark with fzf and change directory
  command! fzfbookmarks :execute "normal! :bmarks\r:write ~/.vifm/tmp-bookmarks\rq"
    \ | execute 'cd "'.term('cat ~/.vifm/tmp-bookmarks | sed "s/: \[.*\]//" |  fzf 2>/dev/tty').'"'

  " Select directory from history with fzf and change directory
  command! fzfhistory :execute "normal! :history\r:write ~/.vifm/tmp-history\rq"
    \ | execute 'cd "'.term('cat ~/.vifm/tmp-history | sed "s/: \[.*\]//" |  fzf 2>/dev/tty').'"'

  " fzf-based cd
  command! fzfcd :execute 'cd "'.term('find . -type d -maxdepth 1 -print | sed "s/\.\///" | sort | fzf 2>/dev/tty').'"'

  " Use ~/.bin/jumplist.sh to cd
  " Use '-T' to force 'fzf' instead of 'fzf-tmux' for aesthetics
  command! fzfjump :execute 'cd "'.term('~/.bin/jumplist.sh -T -- --preview-window up:wrap,3 --preview "ls -1 -d {}" 2>/dev/tty || echo .').'"'

endif
" }}} fzf-based command "

" }}} Commands "
" ------------------------------------------------------------------------------
" filetype configuration {{{ "

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" "&" runs in background (avoids screen refresh)
" The %a macro is ignored.  To use a % you must put %%.

filetype *.pdf,*.png,*.jpg,*.jpeg,*.gif,*.tiff
  \ {Open with Preview}
  \ open %f &

filetype *.doc,*.docx,*.xls,*.xlsx,*.ppt,*.pptx
  \ {Open with MS-Office}
  \ open %f &

filetype *.htm,*.html
  \ {Open with Browser}
  \ open %f &

filetype *.gdoc,*.gslides,*.gsheet,*.gdraw
  \ {Open with Browser}
  \ open %f &

filetype *.graffle
  \ {Open with OmniGraffle}
  \ open %f &

filetype *.txt,*.log,*.vim
  \ {Open with vim}
  \ vim %f

filetype *.mp3,*.wav
  \ {Open with afplay}
  \ echo Playing %f ; afplay %f

filetype *.mp4,*.m4v
  \ {Open with Quicktime}
  \ open %f &

" Everything else opens with "open" by default
filetype * open

" }}} Fold description "
" ------------------------------------------------------------------------------
" Key mappings {{{ "

" Have left and right arrow change panes
nnoremap <left> <c-w>h
nnoremap <right> <c-w>l
" tmux.conf also configures Shift-left/right to change panes as well

" Toggle split pane vertically with "|"
nnoremap | :vsplit!<cr>

" Toggle Split pane horizontally with "_" ("-" is previous directory)
nnoremap _ :split!<cr>

" Use space similar to vim <leader> {{{

" <space>! to cd to current directory in other tmux pane and shift focus
" to it
nnoremap <space>! :!tmux-other-pane --focus --zoom cd "%d" &<cr>

"<space>d to list directory stack
nnoremap <space>d :dirs<cr>

" <space>e to eject volume
nnoremap <space>e :!echo Unmounting %f && diskutil unmount %f<cr>

"<space>m to show marks
nnoremap <space>m :marks<cr>

"<space>o opens a Finder window in current directory
nnoremap <space>o :!open %d &<cr>

"<space>o uses iterm script to open new iterm name with vifm
"open to current directory
nnoremap <space>O :!iterm -t '/usr/local/bin/vifm -c :only %d' &<cr>

"<space>p to push directory onto stack
nnoremap <space>p :pushd<cr>

"<space>P to pop directory from stack
nnoremap <space>P :popd<cr>

" <space>Q to quit
nnoremap <space>Q :quit<cr>

" <space>R to save state and reload configuration
" (restart does not save state otherwise)
nnoremap <space>R :w<cr>:restart<cr>:echo "vifmrc reloaded..."<cr>

" <space>t to run tig
nnoremap <space>t :!tig<cr>

" }}}

" CD to directory under cursor in other window with backslash
nnoremap \ : if filetype('.') == 'dir'
          \ |   cd %d %f
          \ | endif<cr>

" CD to parent with '.'
nnoremap . :cd ..<cr>

" CD to home with '~'
nnoremap ~ :cd ~<cr>

" CD to last directory with '-'
nnoremap - :cd -<cr>

" CD to VCS root with '^'
" CDs to home if not in a VCS-controlled directory
nnoremap ^ :execute 'cd' system('~/.vifm/bin/vcs-root.sh')<cr>

" Next/previous directory in history
nnoremap < <c-o>
" Note this requires cpotions not to have 't' flag
nnoremap > <c-i>

" Toggle showing dotfiles
nnoremap a za

" Open bookmarks
if executable('fzf')
  nnoremap b :fzfbookmarks<cr>
else
  nnoremap b :bookmarks<cr>
endif

" CD with fzf using 'cd'
" Note 'c' is a prefix for a number of other built-in commands
if executable('fzf')
  nnoremap cd :fzfcd<cr>
endif

if executable('fzf')
  nnoremap f :FZFfind<cr>
endif

"Popup directory history menu
if executable('fzf')
  nnoremap h :fzfhistory<cr>
else
  nnoremap h :history<cr>
endif

" Jump
if executable('fzf')
  nnoremap j :fzfjump<cr>
endif

" Quit preview mode
nnoremap q <C-W>z

" Sort by date
nnoremap sd :set sort=-mtime<cr>

" Sort by name (case-insensitive)
nnoremap sn :set sort=+iname<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Tab manipulation
nnoremap Tc :tabnew<cr>
nnoremap Tn :tabnext<cr>
nnoremap Tp :tabprev<cr>
nnoremap Tx :tabclose<cr>
" Jump directly to given tab by number
nnoremap T1 :tabnext 1<cr>
nnoremap T2 :tabnext 2<cr>
nnoremap T3 :tabnext 3<cr>
nnoremap T4 :tabnext 4<cr>
nnoremap T5 :tabnext 5<cr>
nnoremap T6 :tabnext 6<cr>
nnoremap T7 :tabnext 7<cr>
nnoremap T8 :tabnext 8<cr>
nnoremap T9 :tabnext 9<cr>

" Toggle visibility of preview window, splitting window if needed
nnoremap V :if layoutis('only') | vsplit | endif | view<cr>
vnoremap V :if layoutis('only') | vsplit | endif | view<cr>gv

" Yank current directory path into the clipboard
nnoremap yd :!echo -n %d | pbcopy %i<cr>

" Yank current file path into the clipboard
nnoremap yf :!echo -n %c:p | pbcopy %i<cr>

" Yank current file into paste buffer as image
" Uses ~/bin/pb-copy-image
nnoremap yi :!pb-copy-image %c:p &<cr>

" Window manipulation {{{ "
" Note: One can use 'wincmd' in place of <C-w> on RHS.

" Emulate vim's window closing with <C-w>c
" Swaps previous window if only one window open.
nnoremap <C-w>c <c-w>w:only<cr>

if $TMUX != ''
  " Change panes, either in vifm or in tmux.
  " Meant to be invoked via <S-Left> and <S-Right> from tmux.
  " Kudos: https://q2a.vifm.info/305/how-to-map-a-key-to-a-condition
  " Combination of <silent> and backgrounding (&) keep screen flicker down.
  " XXX If vifm is full width of tmux window, I would like to select other
  "     vifm pane to give me a rotation effect.
  "     I suspect I can do by using system() to call a script which
  "     determines and returns the command to run, using tmux's
  "     pane_at_left and pane_at_right to determine a full-width pane.
  "     E.g. see https://github.com/tmux/tmux/issues/1158

  " Handle <S-left>
  " Note <c-h> is mapped to <bs> by vifm
  nnoremap <silent> <C-w><bs>
    \ :if layoutis('vsplit') && paneisat('right')
    \ | execute "wincmd h"
    \ | else
    \ | execute ':!tmux select-pane -L &'
    \ | endif<cr>

  " Handle <S-right>
  nnoremap <silent> <C-w><C-l>
    \ :if layoutis('vsplit') && paneisat('left')
    \ | execute "wincmd l"
    \ | else
    \ | execute ':!tmux select-pane -R &'
    \ | endif<cr>

endif " $TMUX
" }}} Window manipulation "

" }}} Key mappings "
" ------------------------------------------------------------------------------
" fileviewers {{{ "
" For explore mode. 'e' Explores in current pane. 'w' explores in other pane.
" XXX: These don't seem to work with files that start with a '.'

" Force 'ls -G' to display colors in fileviewer
let $CLICOLOR_FORCE=1

" Directories. Use ls as inspect_dir recurses which can take a while
" over the network.
fileviewer */ ls -lFGBh %c
" For some reason ../ seems to be different
fileviewer ../ echo

" Pandoc from http://pandoc.org/
" Only works on .docx and not .doc
fileviewer *.docx pandoc -t plain %c

fileviewer *.zip zip -sf %c
fileviewer *.gz gzip -lv %c
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar tar -tf %c
fileviewer *.dmg hdiutil imageinfo %c

fileviewer *.mp3 eyeD3 %c

" ffprobe is page of ffmpeg
" TODO: This output is verbose and could use refinement
fileviewer *.mp4 ffprobe -i %c -hide_banner

" Disable viewing of files that we cannot convert {{{ "

" A/V files
fileviewer *.jpg echo ""
fileviewer *.png echo ""
fileviewer *.wav echo ""
fileviewer *.mp4 echo ""

" Microsoft Office
fileviewer *.xls,*.xlsx echo ""
fileviewer *.ppt,*.pptx echo ""
" See above for .docx
fileviewer *.doc echo ""

" PDFs
fileviewer *.pdf echo ""

" Keynote
fileviewer *.key echo ""

" Compiled Python
fileviewer *.pyc echo ""

" Window executables
fileviewer *.exe,*.com echo ""

" Mobi ebooks
fileviewer *.mobi echo ""

" Swap files
" XXX This doesn't seem to work with vim swap files, I think because
" they start with a "."
fileviewer *.swp echo ""

" }}} Disable viewing of files that we cannot convert "

" }}} fileviewers "
" ------------------------------------------------------------------------------
" Source os- and system-specific configuration {{{ "
if system("test -f ~/.vifm/os.vifm && echo true") == "true"
  source ~/.vifm/os.vifm
endif
if system("test -f ~/.vifm/sys.vifm && echo true") == "true"
  source ~/.vifm/sys.vifm
endif
" }}} Source system-specific configuration "
" ------------------------------------------------------------------------------
" Choosing configuration {{{ "
" Configuraation to be run only if we are choosing a file
if chooseopt('files')
  " Single pane
  only

  " Don't set title
  set notitle

  " Don't show dotfiles by default
  set nodotfiles

  " q to quit quickly
  nnoremap q :quit<cr>

  colorscheme von-chooser
endif

" }}} Choosing configuration "
